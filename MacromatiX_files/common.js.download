$(document).ready(function()
{
    //for any table that has the class '', alternate the rows with 'odd' class.
    SetOddRowClasses();
    SetDefaultButtonWidth();

    $('a.jQry-print, .jQry-print a').click(function() { window.print(); return false; });
});

function disableControlsRecursively(target, disable)
{
    var targets = target.find("[id]");
    
    if (targets != null && targets.length > 0)
    {
        $.each(targets, function ()
        {
            var jQuery = window.$(this);
            var telerik = window.$find(this.id);

            if (telerik != null) {
                if (disable) {
                    if (typeof telerik.disable != "undefined")
                        telerik.disable();
                    if (typeof telerik.get_dateInput != "undefined")
                        telerik.get_dateInput().disable();
                    if (typeof telerik.set_enabled != "undefined")
                        telerik.set_enabled(false);
                }
                else {
                    if (typeof telerik.enable != "undefined")
                        telerik.enable();
                    if (typeof telerik.get_dateInput != "undefined")
                        telerik.get_dateInput().enable();
                    if (typeof telerik.set_enabled != "undefined")
                        telerik.set_enabled(true);
                }
            } else if (jQuery.length > 0) {
                if (disable)
                    jQuery.attr("disabled", "disabled");
                else
                    jQuery.removeAttr("disabled");
            }
        });
    }
}
function ClosePopup()
{
    toHide = true;
    var tooltip = GetActiveToolTip();
    if (tooltip != null)
    {
        tooltip.hide();
    }
}

function GetActiveToolTip()
{
    var tooltip = Telerik.Web.UI.RadToolTip.getCurrent();
    return tooltip;
}

function ParseTimePickerTime(timePickerServerId)
{
    // parse time component out of a RadTimePicker
    var re = new RegExp(/\d{2}\:\d{2}/g);

    var picker = $find($("input[id$='" + timePickerServerId + "']").attr('id'));
    if (picker)
    {
        var time = picker.get_selectedDate().toString().match(re)[0];
        return time;
    }
}

function SetOddRowClasses()
{
    //This is in a function so it can be called by other plugins.
    //such as the table filter plugin.
    var tables = $('table.generic-table,table.row-highlight');
    $(tables).find('tbody > tr:visible:odd').addClass('odd');
    $(tables).find('tbody > tr:visible:even').removeClass('odd');
    $(tables).find('tbody > tr').bind('mouseover', function() { $(this).find('td').addClass('hover'); });
    $(tables).find('tbody > tr').bind('mouseout', function() { $(this).find('td').removeClass('hover'); });
}

function SetOddRowClassesForTable(table) {
    var tab = $(table);
    tab.find('tbody > tr:visible:odd').addClass('odd');
    tab.find('tbody > tr:visible:even').removeClass('odd');
    tab.find('tbody > tr').bind('mouseover', function () { $(this).find('td').addClass('hover'); });
    tab.find('tbody > tr').bind('mouseout', function () { $(this).find('td').removeClass('hover'); });
}

function ConfirmDelete(message)
{
    return confirm(message);
}

function SetDefaultButtonWidth()
{
    //This function sets a "default" button class to every button that does not already have a
    //class name with "btn" defined to it.
    $('input[type=button],input[type=submit]').each(function(i, e)
    {
        $(e).css({ 'cursor': 'pointer' });
        if ($(e).css('width') == 'auto')
        {
            $(e).css({ 'width': '100px', 'cursor': 'pointer' });
        }
    });
}

function Get24HourTime(value)
{
    var result = "";

    if (value.endsWith(' PM'))
    {
        var timeSplit = (value.replace(" PM", "")).split(':');
        var hour = parseInt(timeSplit[0]);

        if (hour > 0 && hour < 12)
            result = (hour + 12).toString() + ":" + timeSplit[1];
        else
            result = hour.toString() + ":" + timeSplit[1];
    }
    else
    {
        var timeSplit = (value.replace(" AM", "")).split(':');
        var hour = parseInt(timeSplit[0]);

        if (hour > 0 && hour < 12)
            result = hour.toString() + ":" + timeSplit[1];
        else
            result = "0:" + timeSplit[1];
    }

    return result;
}

String.prototype.endsWith = function (str) { return str === undefined ? false : (this.match(str.replace(/[\|\(\)\$\^\*\+\[\]\?]/, "\$1") + "$") == str); };
String.prototype.startsWith = function (str) { return str === undefined ? false : (this.match("^" + str.replace(/[\|\(\)\$\^\*\+\[\]\?]/, "\$1")) == str); };
String.prototype.contains = function(str) { return str === undefined ? false : this.indexOf(str) != -1; };
String.prototype.trim = function () { return (this.replace(/^[\s\xA0]+/, "").replace(/[\s\xA0]+$/, "")); };
String.prototype.format = function () {
    var s = this,
        i = arguments.length;

    while (i--) {
        s = s.replace(new RegExp('\\{' + i + '\\}', 'gm'), arguments[i]);
    }
    return s;
};

var dateFormat = function()
{
    var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
		timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
		timezoneClip = /[^-+\dA-Z]/g,
		pad = function(val, len)
		{
		    val = String(val);
		    len = len || 2;
		    while (val.length < len) val = "0" + val;
		    return val;
		};

    // Regexes and supporting functions are cached through closure
    return function(date, mask, utc)
    {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date))
        {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:")
        {
            mask = mask.slice(4);
            utc = true;
        }

        var _ = utc ? "getUTC" : "get",
			d = date[_ + "Date"](),
			D = date[_ + "Day"](),
			m = date[_ + "Month"](),
			y = date[_ + "FullYear"](),
			H = date[_ + "Hours"](),
			M = date[_ + "Minutes"](),
			s = date[_ + "Seconds"](),
			L = date[_ + "Milliseconds"](),
			o = utc ? 0 : date.getTimezoneOffset(),
			flags = {
			    d: d,
			    dd: pad(d),
			    ddd: dF.i18n.dayNames[D],
			    dddd: dF.i18n.dayNames[D + 7],
			    m: m + 1,
			    mm: pad(m + 1),
			    mmm: dF.i18n.monthNames[m],
			    mmmm: dF.i18n.monthNames[m + 12],
			    yy: String(y).slice(2),
			    yyyy: y,
			    h: H % 12 || 12,
			    hh: pad(H % 12 || 12),
			    H: H,
			    HH: pad(H),
			    M: M,
			    MM: pad(M),
			    s: s,
			    ss: pad(s),
			    l: pad(L, 3),
			    L: pad(L > 99 ? Math.round(L / 10) : L),
			    t: H < 12 ? "a" : "p",
			    tt: H < 12 ? "am" : "pm",
			    T: H < 12 ? "A" : "P",
			    TT: H < 12 ? "AM" : "PM",
			    Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
			    o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
			    S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
			};

        return mask.replace(token, function($0)
        {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
} ();

// Some common format strings
dateFormat.masks = {
    "default": "ddd mmm dd yyyy HH:MM:ss",
    shortDate: "m/d/yy",
    mediumDate: "mmm d, yyyy",
    longDate: "mmmm d, yyyy",
    fullDate: "dddd, mmmm d, yyyy",
    shortTime: "h:MM TT",
    mediumTime: "h:MM:ss TT",
    longTime: "h:MM:ss TT Z",
    isoDate: "yyyy-mm-dd",
    isoTime: "HH:MM:ss",
    isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
		"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
		"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
	],
    monthNames: [
		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
		"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
	]
};

// For convenience...
Date.prototype.format = function(mask, utc)
{
    return dateFormat(this, mask, utc);
};



function SelectTime(sender, args) {
    var sUsrAg = navigator.userAgent;
    if (!sUsrAg.indexOf("Firefox") > -1 && sender && !sUsrAg.indexOf("Mozilla")) {
        var c = $("#" + sender._clientID)[0] || $("#" + sender._clientID);
        if (c.value.length === 0) { return; }
        var oRange = c.createTextRange();
        var index = c.value.indexOf(':') - 2;
        if (c.value.charAt(index) == ' ') { index += 1; }
        oRange.moveStart("character", index);
        oRange.moveEnd("character", c.value.length);
        oRange.select();
    }
}

/* start workflow functions */

function loadExternal(url, id) {
    createCookie("externalPage", url, 0);
    document.location = "MMS_System_External.aspx?MenuCustomItemID=" + id;
}

function toggleWorkFlow(event) {

    if (event == 'manage') {

        setWorkflowFrameSource("MMS_Stores_WorkFlow.aspx");
        $.cookie('tab', 'workflow', { expires: 30 });
        
    } else {

        $("div.left-content").toggleClass("workflow");
        $("div.right-content").toggleClass("workflow");
        $("div.left-content-fg").toggleClass("workflow");
        
        if ($.cookie('tab') == 'menu') {
            setWorkflowFrameSource("MMS_Stores_WorkFlow.aspx");
            $.cookie('tab', 'workflow', { expires: 30 });
        } else {
            $.cookie('tab', 'menu', { expires: 30 });
        }
    }
}

function setWorkflowFrameSource(url) {
    var workflowFrame = $("iframe[name='workflowFrame']")[0];
    if (workflowFrame) {
        if (workflowFrame.contentWindow.location.href === "about:blank") {
            var replaceUrl = function() {
                workflowFrame.contentWindow.location.replace(url);
                workflowFrame.removeEventListener('load', replaceUrl);
             };
             workflowFrame.addEventListener('load', replaceUrl);
        } else {
            workflowFrame.contentWindow.location.replace(url);
        }
    }
}

function toggleWorkFlowCustom() {
    toggleWorkFlow('manage');
}


function changePin() {
    var currentState = $.cookie("pin");
    if (currentState == "true") {
        $("#pin").attr("src", "Images/pinOff.gif");
        $.cookie("pin", "false", { expires: 30 });
    } else if (currentState == "false") {
        $("#pin").attr("src", "Images/pinOn.gif");
        $.cookie("pin", "true", { expires: 30 });
    } else {
        $.cookie("pin", "true", { expires: 30 });
    }
    $("div.left-content-fg").toggleClass("collapsed");
}

function expandSide() {    
    //If the pin is off and the sidebar is collapsed then expand
    if ($.cookie("pin") == "false" && $.cookie("sideBar") == "collapsed") {
        $.cookie("sideBar", "expanded", { expires: 30 });
        toggleSideBar();
        $("div.left-content-fg").toggleClass("collapsed");
    }
}

function collapseSide() {
    //If the pin is off and the sidebar is expanded then collapse   
    if ($.cookie("pin") == "false" && $.cookie("sideBar") == "expanded") {
        $.cookie("sideBar", "collapsed", { expires: 30 });
        toggleSideBar();
        $("div.left-content-fg").toggleClass("collapsed");
    }
}

function toggleSideBar() {
    $("div.nav-pageviews").toggleClass("collapsed");
    $("div.nav-pins").toggleClass("collapsed");
    $("div.left-content").toggleClass("collapsed");
    $("div.right-content").toggleClass("collapsed");
    $("div.left-content-bg").toggleClass("collapsed");
}

function SetupWorkflowTabs(tabStrip) {
    var pinState = $.cookie('pin');
    var sideBarState = $.cookie('sideBar');
    var workflowState = $.cookie('tab');
    var tabsExists = true;
    
    if (tabStrip == null) {
        tabsExists = false;
    }
    if (pinState == null) {
        pinState = "true";
        $.cookie("pin", "true", { expires: 30 });  //default
    }
    if (sideBarState == null) {
        sideBarState = "expanded";
        $.cookie("sideBar", "expanded", { expires: 30 }); //default
    }
    if (workflowState == null) {
        $.cookie('tab', 'menu', { expires: 30 });
    }
    if (tabsExists == true && tabStrip.get_tabs().get_count() > 1 && workflowState == 'workflow') {
        if (tabStrip.get_selectedIndex() == 0) {
            $.cookie('tab', 'menu', { expires: 30 });
            var tab = tabStrip.findTabByValue(1);
            tab.set_selected(true);
        }
        else if ($("div.left-content").hasClass('workflow') != true) {
        $.cookie('tab', 'menu', { expires: 30 });
            toggleWorkFlow();
        }
    }
    if (tabsExists == false) {
        $("#pin").attr("style", "visibility:hidden");
    }
    else {
        if (pinState == "true") {
            $("#pin").attr("src", "Images/pinOn.gif");
            if ($("div.left-content-fg").hasClass('collapsed') == true) {
                $("div.left-content-fg").toggleClass("collapsed");
            }
        }
        else if (pinState == "false") {
            $("#pin").attr("src", "Images/pinOff.gif");
            if (sideBarState == "collapsed") {
                if (!$("div.nav-pageviews").hasClass("collapsed")) {
                    toggleSideBar();
                    if ($("div.left-content-fg").hasClass('collapsed') == true) {
                        $("div.left-content-fg").toggleClass("collapsed");
                    }
                }
            }
            else if (sideBarState == "expanded" && $("div.left-content-fg").hasClass('collapsed') == false) {  
                $("div.left-content-fg").toggleClass("collapsed"); 
            }
        }
    }
}

/* end workflow functions */

/* Mx global object and utilities */
Mx = $.extend((typeof Mx === "undefined") ? {} : Mx, {      // NOTE: IE exceptions if first arg is shortened to "Mx || {}"
    // Create namespace
    ns: function (name) {
        var currentNs = window;
        var nameParts = name.split(".");

        for (var i = 0; i < nameParts.length; i++) {
            var namePart = nameParts[i];
            if (!currentNs[namePart]) {
                currentNs[namePart] = {};
            }
            currentNs = currentNs[namePart];
        };
        return currentNs;
    }
});

Mx.ns("Mx.util");

$.extend(Mx.util, {
    /**
    * @function sortObjectArray Sorts an array of objects by a specific property name.  Array is modified.
    * @param {Array} items The array to sort
    * @param {string} propertyName The object property name to sort by
    * @returns {Array} The array sorted
    */
    sortObjectArray: function (items, propertyName) {
        items.sort(function (a, b) {
            var txta = a[propertyName].toLowerCase();
            var txtb = b[propertyName].toLowerCase();

            if (txta > txtb) {
                return 1;
            }
            else if (txta < txtb) {
                return -1;
            }
            return 0;
        });
        return items;
    },

    /**
    * @function deepCopy Performs a deep clone of an object, handling "fake" arrays unlike $.extend().  NOTE:
    *                    Any object with a 'length' property is assumed to be an array!
    * @param {Object/Array} srcObject The object or array to clone
    * @returns {Object/Array} The array sorted
    */
    deepClone: function (srcObject) {
        // Background on why this function is needed, instead of using "$.extend(true)":
        // $.extend(true) calls $.isArray() to detect arrays when it clones, and if it returns false, it
        // copies the reference.  With "fake" arrays - objects that have 'length', [0]..[n] properties -
        // the array and its elements are not cloned, but the reference to the "fake" array itself is copied.
        // This occurs when you try to copy Kendo's DataSource object...

        function isArray(o) {
            return ((typeof o === "object") && (typeof o.length === "number"));  // checks "fake" arrays also
        }

        function cloneProperty(src, target, name) {
            var s = src[name];
            if (typeof s !== "undefined") {
                if (isArray(s)) {
                    target[name] = cloneArray(s);
                }
                else if (typeof src[i] === "object") {
                    target[name] = recursiveCloneObject(s);
                }
                else {
                    target[name] = s;
                }
            }
        }

        function cloneArray(src) {
            var l = src.length;
            var target = [];
            for (var i = 0; i < l; i++) {
                cloneProperty(src, target, i);
            }
            return target;
        }

        function recursiveCloneObject(src) {
            var target = {};

            for (var name in src) {
                if (src.hasOwnProperty(name)) {
                    cloneProperty(src, target, name);
                }
            }
            return target;
        }

        if (isArray(srcObject)) {
            return cloneArray(srcObject);
        }
        else if (typeof srcObject === "object") {
            return recursiveCloneObject(srcObject);
        }
        return srcObject;
    },

    /**
    * @function removeArrayElement Removes an element from an array.  Array is modified in-place.
    * @param {Array} arr The array
    * @param {Object} element The element to remove
    */
    removeArrayElement: function (arr, element) {
        var idx = $.inArray(element, arr);
        if (idx >= 0) {
            arr.splice(idx, 1);
        }
    },

    parseAjaxDate: function (ajaxDate) {
        return eval('new ' + ajaxDate.replace(/\//g, ''));
    },

    /**
    * @function distinct Return a new array with distinct value from an input array of int/string...
    * @param {Array} arr The array of int/string...
    */
    distinct: function (arr) {
        var result = [];
        $.each(arr, function (i,v) {
            if ($.inArray(v, result) === -1) {
                result.push(v);
            }
        }
        );
        return result.sort();
    },
    /**
    * @function setCheckboxState Set the check box to check or uncheck
    * @param {JqueryObject} checkbox The jquery object
    * @param {bool} checked The value to be set (true: check, false : uncheck)
    */
    setCheckboxState: function (checkbox, checked) {
        return checkbox.prop("checked", checked); // return passed in object for chaining ability
    },
    /**
    * @function parseFloatEx parse the number from string with thousandsSeperator. Ex : "1,000.344"
    * @param {text} string that represent a decimal number, may contain "," as thousand separator
    */
    parseFloatEx: function parseFloatEx(text) {
        var result = 0;
        if (text !== undefined) {
            result = parseFloat(String(text).replace(/,/g, ''));
            if (isNaN(result)) {
                result = 0;
            }
        }
        return result;
    },
    /**
    * @function displayDecimalNumber display common decimal number with option to specify decimal digits. Ex : "1,000.344"
    * @param {value} Float value or String that represent a decimal number, may contain "," as thousand separator
    */
    displayDecimalNumber: function displayDecimalNumber(value, noOfDecimalDigits) {
        if (typeof value !== "number") {
            value = parseFloatEx(value);
        }
        return $().number_format(value, { numberOfDecimals: noOfDecimalDigits, decimalSeparator: '.', thousandSeparator: ',', symbol: '' });
    }
});

Mx.ns("Mx.ajax");

$.extend(Mx.ajax, {
    defaultErrorHandler: function (response, textStatus, errorThrown) {
        if (errorThrown) {
            alert(response.status + ": " + errorThrown);
        } else {
            alert(textStatus.toUpperCase());
        }
    }
});

/* end Mx global object and utilities */

//This is a number formatting function.
//Here is an example how to use it which formats the variable totalinclTax: 
// eg. $().number_format(totalInclTax, { numberOfDecimals: 2, decimalSeparator: '.', thousandSeparator: ',', symbol: '$' })

jQuery.fn.extend({

    number_format: function (numero, params) {
        var sDefaults =
			{
			    numberOfDecimals: 2,
			    decimalSeparator: ',',
			    thousandSeparator: '.',
			    symbol: ''
			}

        var options = jQuery.extend(sDefaults, params);

        var number = numero;
        var decimals = options.numberOfDecimals;
        var dec_point = options.decimalSeparator;
        var thousands_sep = options.thousandSeparator;
        var currencySymbol = options.symbol;

        var exponent = "";
        var numberstr = number.toString();
        var eindex = numberstr.indexOf("e");
        if (eindex > -1) {
            exponent = numberstr.substring(eindex);
            number = parseFloat(numberstr.substring(0, eindex));
        }

        if (decimals != null) {
            var temp = Math.pow(10, decimals);
            number = Math.round(number * temp) / temp;
        }
        var sign = number < 0 ? "-" : "";
        var integer = (number > 0 ?
		  Math.floor(number) : Math.abs(Math.ceil(number))).toString();

        var fractional = number.toString().substring(integer.length + sign.length);
        dec_point = dec_point != null ? dec_point : ".";
        fractional = decimals != null && decimals > 0 || fractional.length > 1 ?
				   (dec_point + fractional.substring(1)) : "";
        if (decimals != null && decimals > 0) {
            for (i = fractional.length - 1, z = decimals; i < z; ++i)
                fractional += "0";
        }

        thousands_sep = (thousands_sep != dec_point || fractional.length == 0) ?
					  thousands_sep : null;
        if (thousands_sep != null && thousands_sep != "") {
            for (i = integer.length - 3; i > 0; i -= 3)
                integer = integer.substring(0, i) + thousands_sep + integer.substring(i);
        }

        if (options.symbol == '') {
            return sign + integer + fractional + exponent;
        }
        else {
            return currencySymbol + ' ' + sign + integer + fractional + exponent;
        }

    }
});
